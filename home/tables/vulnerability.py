from __future__ import annotations

import uuid
from enum import Enum

from piccolo.columns import (
    UUID,
    ForeignKey,
    Text,
    Timestamptz,
    LazyTableReference,
    JSON,
)
from piccolo.table import Table


class VulnerabilityState(Enum):
    NEW = "New"
    UNDER_TRIAGE = "Under Triage"
    RESOLVED = "Resolved"


class VulnerabilityExploitability(Enum):
    UNKNOWN = "Unknown"
    EXPLOITABLE = "Exploitable"
    NOT_EXPLOITABLE = "Not Exploitable"


class Vulnerability(Table):
    id = UUID(primary_key=True, default=uuid.uuid4, index=True)
    created_at = Timestamptz(help_text="When the vulnerability was created")
    scan = ForeignKey(
        LazyTableReference("Scan", app_name="home"),
        index=True,
        help_text="The scan this vulnerability exists as",
    )
    project = ForeignKey(
        LazyTableReference("Project", app_name="home"),
        index=True,
        help_text="The project this vulnerability belongs to",
    )
    title = Text()
    description = Text(default="")
    impact = Text(default="", help_text="The scanner disclosed impact of this result")
    likelihood = Text(
        default="", help_text="The scanner disclosed likelihood of this result"
    )
    severity = Text(
        default="", help_text="The scanner disclosed severity of this result"
    )
    confidence = Text(
        default="", help_text="How confident the scanner is about this result"
    )
    code_file = Text(
        default="",
        help_text="A path to the code at fault",
    )
    code_line = Text(
        default="",
        help_text="The line of code which threw this error",
    )
    code_context = Text(
        default="",
        help_text="The code related to this issue",
    )
    found_by = Text(
        default="Unknown",
        help_text="The analysis interface that found this vulnerability",
    )
    notes = Text(
        default="", help_text="User provided notes surrounding this vulnerability"
    )
    extra_metadata = JSON(
        help_text="Extra metadata provided by this scanner. This should be one level deep json."
    )
    state = Text(
        index=True,
        default=VulnerabilityState.NEW,
        choices=VulnerabilityState,
        help_text="The current state of this vulnerability",
    )
    exploitability = Text(
        index=True,
        default=VulnerabilityExploitability.UNKNOWN,
        choices=VulnerabilityExploitability,
        help_text="Is this vulnerability exploitable?",
    )

    @property
    def uuid(self) -> str:
        return str(self.id)

    def __eq__(self, other):
        if not isinstance(other, Vulnerability):
            return False

        if (
            self.title == other.title
            and self.description == other.description
            and self.code_file == other.code_file
            and self.code_line == other.code_line
            and self.found_by == other.found_by
            and self.code_context == other.code_context
        ):
            # Happy enough by this point
            return True

        return False
